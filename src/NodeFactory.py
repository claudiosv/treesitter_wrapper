from python_types import *
# from Node import Node


from tree_sitter import Language, Node as TsNode


class NodeFactory:
    @staticmethod
    def get_node_type(node_type: str) -> Node:
        match node_type:
            case "_compound_statement":
                return _CompoundStatement
            case "_simple_statement":
                return _SimpleStatement
            case "expression":
                return Expression
            case "parameter":
                return Parameter
            case "pattern":
                return Pattern
            case "aliased_import":
                return AliasedImport
            case "argument_list":
                return ArgumentList
            case "assignment":
                return Assignment
            case "augmented_assignment":
                return AugmentedAssignment
            case "block":
                return Block
            case "case_clause":
                return CaseClause
            case "case_pattern":
                return CasePattern
            case "chevron":
                return Chevron
            case "class_pattern":
                return ClassPattern
            case "complex_pattern":
                return ComplexPattern
            case "constrained_type":
                return ConstrainedType
            case "decorator":
                return Decorator
            case "dict_pattern":
                return DictPattern
            case "dictionary_splat":
                return DictionarySplat
            case "dotted_name":
                return DottedName
            case "elif_clause":
                return ElifClause
            case "else_clause":
                return ElseClause
            case "except_clause":
                return ExceptClause
            case "except_group_clause":
                return ExceptGroupClause
            case "expression_list":
                return ExpressionList
            case "finally_clause":
                return FinallyClause
            case "for_in_clause":
                return ForInClause
            case "format_expression":
                return FormatExpression
            case "format_specifier":
                return FormatSpecifier
            case "generic_type":
                return GenericType
            case "if_clause":
                return IfClause
            case "import_prefix":
                return ImportPrefix
            case "interpolation":
                return Interpolation
            case "keyword_argument":
                return KeywordArgument
            case "keyword_pattern":
                return KeywordPattern
            case "lambda_parameters":
                return LambdaParameters
            case "member_type":
                return MemberType
            case "module":
                return Module
            case "pair":
                return Pair
            case "parameters":
                return Parameters
            case "parenthesized_list_splat":
                return ParenthesizedListSplat
            case "pattern_list":
                return PatternList
            case "relative_import":
                return RelativeImport
            case "slice":
                return Slice
            case "splat_pattern":
                return SplatPattern
            case "splat_type":
                return SplatType
            case "string_content":
                return StringContent
            case "type_parameter":
                return TypeParameter
            case "union_pattern":
                return UnionPattern
            case "union_type":
                return UnionType
            case "wildcard_import":
                return WildcardImport
            case "with_clause":
                return WithClause
            case "with_item":
                return WithItem
            case "yield":
                return Yield
            case "_":
                return Underscore
            case "__future__":
                return _Future
            case "and":
                return And
            case "as":
                return As
            case "assert":
                return Assert
            case "async":
                return Async
            case "break":
                return Break
            case "case":
                return Case
            case "class":
                return Class
            case "comment":
                return Comment
            case "continue":
                return Continue
            case "def":
                return Def
            case "del":
                return Del
            case "elif":
                return Elif
            case "else":
                return Else
            case "escape_interpolation":
                return EscapeInterpolation
            case "escape_sequence":
                return EscapeSequence
            case "except":
                return Except
            case "exec":
                return Exec
            case "finally":
                return Finally
            case "for":
                return For
            case "from":
                return From
            case "global":
                return Global
            case "if":
                return If
            case "import":
                return Import
            case "in":
                return In
            case "is":
                return Is
            case "is not":
                return IsNot
            case "line_continuation":
                return LineContinuation
            case "match":
                return Match
            case "nonlocal":
                return Nonlocal
            case "not":
                return Not
            case "not in":
                return NotIn
            case "or":
                return Or
            case "pass":
                return Pass
            case "print":
                return Print
            case "raise":
                return Raise
            case " return":
                return Return
            case "string_end":
                return StringEnd
            case "string_start":
                return StringStart
            case "try":
                return Try
            case "type_conversion":
                return TypeConversion
            case "while":
                return While
            case "with":
                return With
            case "class_definition":
                return ClassDefinition
            case "decorated_definition":
                return DecoratedDefinition
            case "for_statement":
                return ForStatement
            case "function_definition":
                return FunctionDefinition
            case "if_statement":
                return IfStatement
            case "match_statement":
                return MatchStatement
            case "try_statement":
                return TryStatement
            case "while_statement":
                return WhileStatement
            case "with_statement":
                return WithStatement
            case "assert_statement":
                return AssertStatement
            case "break_statement":
                return BreakStatement
            case "continue_statement":
                return ContinueStatement
            case "delete_statement":
                return DeleteStatement
            case "exec_statement":
                return ExecStatement
            case "expression_statement":
                return ExpressionStatement
            case "future_import_statement":
                return FutureImportStatement
            case "global_statement":
                return GlobalStatement
            case "import_from_statement":
                return ImportFromStatement
            case "import_statement":
                return ImportStatement
            case "nonlocal_statement":
                return NonlocalStatement
            case "pass_statement":
                return PassStatement
            case "print_statement":
                return PrintStatement
            case "raise_statement":
                return RaiseStatement
            case " return_statement":
                return  returnStatement
            case "type_alias_statement":
                return TypeAliasStatement
            case "as_pattern":
                return AsPattern
            case "boolean_operator":
                return BooleanOperator
            case "comparison_operator":
                return ComparisonOperator
            case "conditional_expression":
                return ConditionalExpression
            case "lambda":
                return Lambda
            case "named_expression":
                return NamedExpression
            case "not_operator":
                return NotOperator
            case "primary_expression":
                return PrimaryExpression
            case "default_parameter":
                return DefaultParameter
            case "dictionary_splat_pattern":
                return DictionarySplatPattern
            case "keyword_separator":
                return KeywordSeparator
            case "positional_separator":
                return PositionalSeparator
            case "typed_default_parameter":
                return TypedDefaultParameter
            case "typed_parameter":
                return TypedParameter
            case "list_pattern":
                return ListPattern
            case "await":
                return Await
            case "binary_operator":
                return BinaryOperator
            case "call":
                return Call
            case "concatenated_string":
                return ConcatenatedString
            case "dictionary":
                return Dictionary
            case "dictionary_comprehension":
                return DictionaryComprehension
            case "ellipsis":
                return Ellipsis
            case "false":
                return FalseT
            case "float":
                return Float
            case "generator_expression":
                return GeneratorExpression
            case "integer":
                return Integer
            case "list":
                return List
            case "list_comprehension":
                return ListComprehension
            case "list_splat":
                return ListSplat
            case "none":
                return NoneT
            case "parenthesized_expression":
                return ParenthesizedExpression
            case "set":
                return Set
            case "set_comprehension":
                return SetComprehension
            case "string":
                return String
            case "true":
                return TrueT
            case "tuple":
                return Tuple
            case "unary_operator":
                return UnaryOperator
            case "list_splat_pattern":
                return ListSplatPattern
            case "tuple_pattern":
                return TuplePattern
            case "attribute":
                return Attribute
            case "subscript":
                return Subscript
            case "identifier":
                return Identifier
            case _:
                return Type
        raise Exception(f"Type {node_type} not found")

    @staticmethod
    def get_node(node: TsNode, language: Language) -> Node:
        if node is None:
            return None
        else:
            return NodeFactory.get_node_type(node.type)(node, language)